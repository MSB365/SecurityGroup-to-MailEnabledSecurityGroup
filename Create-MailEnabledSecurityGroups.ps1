<#
.SYNOPSIS
    Creates mail-enabled security groups in Exchange Online using exported Entra ID group data.

.DESCRIPTION
    This script reads the CSV file generated by Export-EntraIDGroupMembers.ps1 and creates
    corresponding mail-enabled security groups in Exchange Online. It adds all members from
    the original groups and generates a comprehensive HTML report.

.PARAMETER InputCsvPath
    Path to the CSV file generated by Export-EntraIDGroupMembers.ps1

.PARAMETER EmailDomain
    Domain to use for the mail-enabled security groups (e.g., "contoso.com")

.PARAMETER GroupPrefix
    Prefix to add to group names (default: "MEG-")

.PARAMETER ReportPath
    Path for the HTML report file (default: ".\MailEnabledGroups_Creation_Report.html")

.EXAMPLE
    .\Create-MailEnabledSecurityGroups.ps1 -InputCsvPath ".\EntraID_GroupMembers_Export.csv" -EmailDomain "contoso.com"
    
.EXAMPLE
    .\Create-MailEnabledSecurityGroups.ps1 -InputCsvPath ".\members.csv" -EmailDomain "contoso.com" -GroupPrefix "MESG-" -ReportPath ".\report.html"
#>

param(
    [Parameter(Mandatory = $true)]
    [string]$InputCsvPath,
    
    [Parameter(Mandatory = $true)]
    [string]$EmailDomain,
    
    [Parameter(Mandatory = $false)]
    [string]$GroupPrefix = "MEG-",
    
    [Parameter(Mandatory = $false)]
    [string]$ReportPath = ".\MailEnabledGroups_Creation_Report.html"
)

# Initialize variables
$StartTime = Get-Date
$CreationResults = @()
$TotalGroups = 0
$SuccessfulGroups = 0
$FailedGroups = 0
$TotalMembersAdded = 0
$SkippedMembers = @()

# Function to write colored output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Function to create safe alias from group name
function Get-SafeAlias {
    param([string]$GroupName)
    
    $Alias = $GroupName -replace '[^a-zA-Z0-9]', ''
    $Alias = $Alias.Substring(0, [Math]::Min($Alias.Length, 20))
    return $Alias.ToLower()
}

# Function to generate HTML report
function Generate-HTMLReport {
    param(
        [array]$Results,
        [array]$SkippedMembers,
        [string]$OutputPath,
        [datetime]$StartTime,
        [datetime]$EndTime,
        [int]$TotalGroups,
        [int]$SuccessfulGroups,
        [int]$FailedGroups,
        [int]$TotalMembersAdded,
        [string]$EmailDomain,
        [string]$GroupPrefix
    )
    
    $Duration = $EndTime - $StartTime
    $ResultsHtml = ""
    $SkippedMembersHtml = ""
    
    foreach ($result in $Results) {
        $statusColor = if ($result.Status -eq "Success") { "#28a745" } else { "#dc3545" }
        $ResultsHtml += @"
        <tr>
            <td>$($result.OriginalGroupName)</td>
            <td>$($result.NewGroupName)</td>
            <td>$($result.EmailAddress)</td>
            <td>$($result.MembersAdded)</td>
            <td>$($result.MembersSkipped)</td>
            <td><span style="color: $statusColor; font-weight: bold;">$($result.Status)</span></td>
            <td>$($result.Message)</td>
        </tr>
"@
    }
    
    foreach ($skipped in $SkippedMembers) {
        $SkippedMembersHtml += @"
        <tr>
            <td>$($skipped.GroupName)</td>
            <td>$($skipped.MemberName)</td>
            <td>$($skipped.MemberEmail)</td>
            <td>$($skipped.Reason)</td>
        </tr>
"@
    }
    
    $HtmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mail-Enabled Security Groups Creation Report</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 1400px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 3px solid #0078d4; }
        .header h1 { color: #0078d4; margin: 0; font-size: 2.5em; }
        .header p { color: #666; margin: 10px 0 0 0; font-size: 1.1em; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .summary-card { background: linear-gradient(135deg, #0078d4, #106ebe); color: white; padding: 20px; border-radius: 8px; text-align: center; }
        .summary-card h3 { margin: 0 0 10px 0; font-size: 2em; }
        .summary-card p { margin: 0; opacity: 0.9; }
        .section { margin-bottom: 30px; }
        .section h2 { color: #0078d4; border-bottom: 2px solid #e1e1e1; padding-bottom: 10px; }
        table { width: 100%; border-collapse: collapse; margin-top: 15px; font-size: 0.9em; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f8f9fa; font-weight: 600; color: #495057; }
        tr:hover { background-color: #f8f9fa; }
        .success { color: #28a745; font-weight: bold; }
        .error { color: #dc3545; font-weight: bold; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e1e1e1; color: #666; }
        .info-box { background-color: #e7f3ff; border-left: 4px solid #0078d4; padding: 15px; margin: 15px 0; }
        .warning-box { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; }
        .next-steps { background-color: #d4edda; border-left: 4px solid #28a745; padding: 15px; margin: 15px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Mail-Enabled Security Groups Creation Report</h1>
            <p>Generated on $($EndTime.ToString("MMMM dd, yyyy 'at' HH:mm:ss"))</p>
        </div>
        
        <div class="summary">
            <div class="summary-card">
                <h3>$TotalGroups</h3>
                <p>Total Groups Processed</p>
            </div>
            <div class="summary-card">
                <h3>$SuccessfulGroups</h3>
                <p>Successfully Created</p>
            </div>
            <div class="summary-card">
                <h3>$FailedGroups</h3>
                <p>Failed Creations</p>
            </div>
            <div class="summary-card">
                <h3>$TotalMembersAdded</h3>
                <p>Total Members Added</p>
            </div>
        </div>
        
        <div class="section">
            <h2>Configuration Details</h2>
            <div class="info-box">
                <strong>Start Time:</strong> $($StartTime.ToString("yyyy-MM-dd HH:mm:ss"))<br>
                <strong>End Time:</strong> $($EndTime.ToString("yyyy-MM-dd HH:mm:ss"))<br>
                <strong>Duration:</strong> $($Duration.ToString("hh\:mm\:ss"))<br>
                <strong>Input File:</strong> $InputCsvPath<br>
                <strong>Email Domain:</strong> $EmailDomain<br>
                <strong>Group Prefix:</strong> $GroupPrefix
            </div>
        </div>
        
        <div class="section">
            <h2>Group Creation Results</h2>
            <table>
                <thead>
                    <tr>
                        <th>Original Group</th>
                        <th>New Group Name</th>
                        <th>Email Address</th>
                        <th>Members Added</th>
                        <th>Members Skipped</th>
                        <th>Status</th>
                        <th>Message</th>
                    </tr>
                </thead>
                <tbody>
                    $ResultsHtml
                </tbody>
            </table>
        </div>
        
        $(if ($SkippedMembers.Count -gt 0) { @"
        <div class="section">
            <h2>Skipped Members Details</h2>
            <div class="warning-box">
                <strong>Note:</strong> Some members could not be added to the mail-enabled security groups. 
                This is typically due to members not having Exchange Online mailboxes or permission issues.
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Group Name</th>
                        <th>Member Name</th>
                        <th>Member Email</th>
                        <th>Reason</th>
                    </tr>
                </thead>
                <tbody>
                    $SkippedMembersHtml
                </tbody>
            </table>
        </div>
"@ })
        
        <div class="section">
            <h2>Next Steps</h2>
            <div class="next-steps">
                <h4>Recommended Actions:</h4>
                <ul>
                    <li><strong>Verify Groups:</strong> Check the Exchange Admin Center to confirm all groups were created correctly</li>
                    <li><strong>Test Email Delivery:</strong> Send test emails to the new distribution groups</li>
                    <li><strong>Review Skipped Members:</strong> Investigate why certain members couldn't be added and resolve if necessary</li>
                    <li><strong>Update Permissions:</strong> Configure any additional permissions or restrictions as needed</li>
                    <li><strong>Documentation:</strong> Update your organization's group documentation with the new mail-enabled security groups</li>
                </ul>
            </div>
        </div>
        
        <div class="footer">
            <p>Report generated by Create-MailEnabledSecurityGroups.ps1</p>
            <p>Exchange Online PowerShell | Mail-Enabled Security Groups Creation Tool</p>
        </div>
    </div>
</body>
</html>
"@
    
    $HtmlContent | Out-File -FilePath $OutputPath -Encoding UTF8
}

# Main script execution
try {
    Write-ColorOutput "=== Mail-Enabled Security Groups Creation Tool ===" "Cyan"
    Write-ColorOutput "Start Time: $($StartTime.ToString('yyyy-MM-dd HH:mm:ss'))" "Gray"
    Write-ColorOutput ""
    
    # Validate email domain
    if ($EmailDomain -notmatch '^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$') {
        throw "Invalid email domain format: $EmailDomain"
    }
    
    # Check if Exchange Online module is installed
    Write-ColorOutput "Checking Exchange Online PowerShell module..." "Yellow"
    if (!(Get-Module -ListAvailable -Name ExchangeOnlineManagement)) {
        Write-ColorOutput "Installing Exchange Online PowerShell module..." "Yellow"
        Install-Module -Name ExchangeOnlineManagement -Force -AllowClobber -Scope CurrentUser
    }
    
    # Import Exchange Online module
    Write-ColorOutput "Importing Exchange Online PowerShell module..." "Yellow"
    Import-Module ExchangeOnlineManagement
    
    # Connect to Exchange Online
    Write-ColorOutput "Connecting to Exchange Online..." "Yellow"
    Write-ColorOutput "Please sign in when prompted..." "Cyan"
    Connect-ExchangeOnline -ShowProgress $true
    
    Write-ColorOutput "Successfully connected to Exchange Online!" "Green"
    Write-ColorOutput ""
    
    # Validate input file
    if (!(Test-Path $InputCsvPath)) {
        throw "Input CSV file not found: $InputCsvPath"
    }
    
    # Read input CSV
    Write-ColorOutput "Reading input CSV file: $InputCsvPath" "Yellow"
    $InputData = Import-Csv $InputCsvPath
    
    if (!$InputData -or $InputData.Count -eq 0) {
        throw "No data found in input CSV file"
    }
    
    # Validate CSV structure
    $RequiredColumns = @("GroupName", "MemberDisplayName", "MemberUPN", "MemberEmail")
    foreach ($Column in $RequiredColumns) {
        if (!($InputData | Get-Member -Name $Column)) {
            throw "Input CSV must contain a '$Column' column"
        }
    }
    
    # Group data by GroupName
    $GroupedData = $InputData | Group-Object -Property GroupName
    $TotalGroups = $GroupedData.Count
    
    Write-ColorOutput "Found $TotalGroups unique groups to create" "Green"
    Write-ColorOutput "Email domain: $EmailDomain" "Gray"
    Write-ColorOutput "Group prefix: $GroupPrefix" "Gray"
    Write-ColorOutput ""
    
    # Process each group
    $Counter = 1
    foreach ($GroupData in $GroupedData) {
        $OriginalGroupName = $GroupData.Name
        $NewGroupName = "$GroupPrefix$OriginalGroupName"
        $GroupAlias = Get-SafeAlias -GroupName $OriginalGroupName
        $GroupEmail = "$GroupAlias@$EmailDomain"
        $Members = $GroupData.Group
        
        Write-ColorOutput "[$Counter/$TotalGroups] Creating group: $NewGroupName" "Cyan"
        Write-ColorOutput "  Email: $GroupEmail" "Gray"
        Write-ColorOutput "  Members to add: $($Members.Count)" "Gray"
        
        try {
            # Check if group already exists
            $ExistingGroup = Get-DistributionGroup -Identity $NewGroupName -ErrorAction SilentlyContinue
            
            if ($ExistingGroup) {
                Write-ColorOutput "  ⚠️ Group already exists, skipping creation" "Yellow"
                $GroupCreated = $true
            }
            else {
                # Create the mail-enabled security group
                $NewGroup = New-DistributionGroup -Name $NewGroupName -Alias $GroupAlias -Type "Security" -PrimarySmtpAddress $GroupEmail -ErrorAction Stop
                Write-ColorOutput "  ✅ Group created successfully" "Green"
                $GroupCreated = $true
            }
            
            if ($GroupCreated) {
                # Add members to the group
                $MembersAdded = 0
                $MembersSkipped = 0
                
                foreach ($Member in $Members) {
                    try {
                        $MemberIdentity = if ($Member.MemberEmail) { $Member.MemberEmail } else { $Member.MemberUPN }
                        
                        if ($MemberIdentity) {
                            Add-DistributionGroupMember -Identity $NewGroupName -Member $MemberIdentity -ErrorAction Stop
                            $MembersAdded++
                            $TotalMembersAdded++
                        }
                        else {
                            $SkippedMembers += [PSCustomObject]@{
                                GroupName = $NewGroupName
                                MemberName = $Member.MemberDisplayName
                                MemberEmail = $Member.MemberEmail
                                Reason = "No valid email address or UPN"
                            }
                            $MembersSkipped++
                        }
                    }
                    catch {
                        $SkippedMembers += [PSCustomObject]@{
                            GroupName = $NewGroupName
                            MemberName = $Member.MemberDisplayName
                            MemberEmail = $Member.MemberEmail
                            Reason = $_.Exception.Message
                        }
                        $MembersSkipped++
                    }
                }
                
                $CreationResults += [PSCustomObject]@{
                    OriginalGroupName = $OriginalGroupName
                    NewGroupName = $NewGroupName
                    EmailAddress = $GroupEmail
                    MembersAdded = $MembersAdded
                    MembersSkipped = $MembersSkipped
                    Status = "Success"
                    Message = "Group created with $MembersAdded members"
                }
                $SuccessfulGroups++
                Write-ColorOutput "  ✅ Added $MembersAdded members successfully" "Green"
                if ($MembersSkipped -gt 0) {
                    Write-ColorOutput "  ⚠️ Skipped $MembersSkipped members" "Yellow"
                }
            }
        }
        catch {
            $CreationResults += [PSCustomObject]@{
                OriginalGroupName = $OriginalGroupName
                NewGroupName = $NewGroupName
                EmailAddress = $GroupEmail
                MembersAdded = 0
                MembersSkipped = $Members.Count
                Status = "Failed"
                Message = $_.Exception.Message
            }
            $FailedGroups++
            Write-ColorOutput "  ❌ Error: $($_.Exception.Message)" "Red"
        }
        
        $Counter++
        Write-ColorOutput ""
    }
    
    # Generate HTML report
    $EndTime = Get-Date
    Write-ColorOutput "Generating HTML report: $ReportPath" "Yellow"
    Generate-HTMLReport -Results $CreationResults -SkippedMembers $SkippedMembers -OutputPath $ReportPath -StartTime $StartTime -EndTime $EndTime -TotalGroups $TotalGroups -SuccessfulGroups $SuccessfulGroups -FailedGroups $FailedGroups -TotalMembersAdded $TotalMembersAdded -EmailDomain $EmailDomain -GroupPrefix $GroupPrefix
    Write-ColorOutput "✅ HTML report generated successfully!" "Green"
    
    # Summary
    Write-ColorOutput ""
    Write-ColorOutput "=== CREATION SUMMARY ===" "Cyan"
    Write-ColorOutput "Total Groups Processed: $TotalGroups" "White"
    Write-ColorOutput "Successfully Created: $SuccessfulGroups" "Green"
    Write-ColorOutput "Failed Creations: $FailedGroups" "Red"
    Write-ColorOutput "Total Members Added: $TotalMembersAdded" "White"
    Write-ColorOutput "Total Members Skipped: $($SkippedMembers.Count)" "Yellow"
    Write-ColorOutput "Duration: $((Get-Date) - $StartTime)" "Gray"
    Write-ColorOutput ""
    Write-ColorOutput "Files Generated:" "Cyan"
    Write-ColorOutput "  📊 HTML Report: $ReportPath" "White"
    Write-ColorOutput ""
    Write-ColorOutput "Next Steps:" "Cyan"
    Write-ColorOutput "  1. Review the HTML report for detailed results" "White"
    Write-ColorOutput "  2. Check Exchange Admin Center to verify groups" "White"
    Write-ColorOutput "  3. Test email delivery to new distribution groups" "White"
    Write-ColorOutput "  4. Investigate any skipped members if necessary" "White"
    
}
catch {
    Write-ColorOutput "❌ Script execution failed: $($_.Exception.Message)" "Red"
    Write-ColorOutput "Stack Trace: $($_.ScriptStackTrace)" "Red"
    exit 1
}
finally {
    # Disconnect from Exchange Online
    try {
        Disconnect-ExchangeOnline -Confirm:$false -ErrorAction SilentlyContinue
        Write-ColorOutput ""
        Write-ColorOutput "Disconnected from Exchange Online" "Gray"
    }
    catch {
        # Ignore disconnection errors
    }
}
